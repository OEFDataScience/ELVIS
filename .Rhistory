ca_base + theme_nothing()
test <- map_data("world")
bhutan <- test[test$region=="Bhutan", ]
View(bhutan)
bhutan_base <- ggplot(data = bhutan, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "grey")
bhutan_base + theme_nothing()
google <- get_googlemap("Bhutan")
register_google(key = "AIzaSyDmtm1bMF6QPseGzRhv09puCElWD1gTiSQ")
require(devtools)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("digest")
require(devtools)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
#test 2
bhutan2 <- get_map(location = "Bhutan", source = "stamen",
maptype = "terrain", crop = FALSE)
geocode("Bhutan")
install.packages("digest")
Sys.getenv("R_LIBS_USER")
library(viridis)
library(ggplot2)
library(marmap)
library(ggmap)
library(maps)
library(mapdata)
register_google(key = "AIzaSyA14RsO50T8z0S7ia93nR2ScTcDplKP9yA")
bhutan_bb <- c(left = 88.4266,
bottom = 26.3874,
right = 92.6853,
top = 28.4381)
bhutan3 <- get_stamenmap(bbox = bhutan_bb, maptype = "toner")
ggmap(bhutan3) + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "stamen",
maptype = "toner", crop = FALSE, zoom = 8)
ggmap(bhutan2) + theme_nothing()
register_google(key = "AIzaSyA14RsO50T8z0S7ia93nR2ScTcDplKP9yA")
bhutan2 <- get_map(location = "bhutan", source = "stamen",
maptype = "toner", crop = FALSE, zoom = 7)
ggmap(bhutan2) + theme_nothing()
register_google(key = "AIzaSyA14RsO50T8z0S7ia93nR2ScTcDplKP9yA")
bhutan2 <- get_map(location = "bhutan", source = "stamen",
maptype = "toner", crop = FALSE, zoom = 6)
ggmap(bhutan2) + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "osm")
bhutan2 <- get_map(location = "bhutan", source = "osm", crop = FALSE)
bhutan2 <- get_map(location = "bhutan", source = "osm", crop = FALSE)
bhutan3 <- get_stamenmap(bbox = bhutan_bb, maptype = "toner")
ggmap(bhutan3) + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "stamen", crop = FALSE)
ggmap(bhutan2) + theme_nothing()
test <- map_data("world")
bhutan <- test[test$region=="Bhutan", ]
bhutan_base <- ggplot(data = bhutan, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "grey")
bhutan_base + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "stamen", crop = FALSE,
maptype = "terrain", zoom = 9)
ggmap(bhutan2) + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "stamen", crop = FALSE,
maptype = "terrain", zoom = 8)
ggmap(bhutan2) + theme_nothing()
bhutan2 <- get_map(location = "bhutan", source = "stamen", crop = FALSE,
maptype = "terrain", zoom = 8)
ggmap(bhutan2) + theme_nothing()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("install.packages("install.packages("rmarkdown")")")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
df1 <- read.csv("annual_risk_table.csv")
View(df1)
install.packages("kabelExtra")
install.packages("kableExtra")
View(df1)
.72*100
df2 <- read.csv("update_risk_table.csv")
View(df2)
View(df1)
install.packages("DT")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
View(df1)
unique(df1$elecViolence1)
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
df2$dates <- as.Date(df2$dates, format = "%m/%d/%Y")
df2 <- df2[order(df2$dates), ]
df11 <- df1[df1$dates == df2$dates, ]
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
df2$dates <- as.Date(df2$dates, format = "%m/%d/%Y")
df2 <- df2[order(df2$dates), ]
df11 <- df1[df1$dates >= df2$dates, ]
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
df2$dates <- as.Date(df2$dates, format = "%m/%d/%Y")
df2 <- df2[order(df2$dates), ]
df11 <- df1[df1$dates >= Sys.Date(), ]
View(df2)
View(df11)
#make diff between monthly update and annual risk
df11 <- df1[df1$dates >= Sys.Date(), ]
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
df2$dates <- as.Date(df2$dates, format = "%m/%d/%Y")
df2 <- df2[order(df2$dates), ]
#make diff between monthly update and annual risk
df11 <- df1[df1$dates >= Sys.Date(), ]
View(df2)
View(df11)
df2 <- read.csv("update_risk_table.csv")
View(df2)
df2$dates <- as.Date(df2$dates, format = "%m/%d/%Y")
View(df2)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
#make diff between monthly update and annual risk
df11 <- df1[df1$dates >= Sys.Date(), ]
View(df2)
View(df11)
df2$diff <- df2$prediction - df11$prediction
View(df2)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
nrow(df1)
nrow(df1) - nrow(df2)
nrow(df1)-nrow(df2) / nrow(df1)
41/57
(nrow(df1) - nrow(df2)) / nrow(df1)
((nrow(df1) - nrow(df2)) / nrow(df1))*100
df1
View(df1)
classerror <- mean(elecViolence1 != prediction)
classerror <- mean(df1$elecViolence1 != prediction)
classerror <- mean(df1$elecViolence1 != df1$prediction)
classerror <- mean(df1$elecViolence1 != df1$prediction, na.rm = TRUE)
classerror <- mean(df1$elecViolence1 != df1$vio2, na.rm = TRUE)
acc <- 1 - classerror
acc*100
df1$vio3 <- as.factor(ifelse(df1$p\))
df1$vio3 <- as.factor(ifelse(df1$prediction >= .70, "vio", "peace"))
classerror <- mean(df1$elecViolence1 != df1$vio3, na.rm = TRUE)
acc <- 1 - classerror
acc*100
df3 <- read.csv("full_data.csv")
summary(df1$elecViolence1)
df1$elecViolence1[1]
df1$elecViolence1[[1]]
summary(df1$elecViolence1[[1]])
summary(df1$elecViolence1[1])
summary(df1$elecViolence1)[1]
summary(df1$elecViolence1)[[1]]
summary(df1$elecViolence1)[[1]] + summary(df1$elecViolence1)[[2]]
summary(df1$elecViolence1)[[1]] + summary(df1$elecViolence1)[[2]] + summary(df1$elecViolence1)[[3]]
28/57
13/57
View(df3)
View(df3)
imp_df <- read.csv("imp_df.csv")
View(imp_df)
names(imp_df$variable)
View(imp_df)
unique(imp_df$variable)
test <- unique(imp_df$variable)
test <- as.character(unique(imp_df$variable))
library(shiny); runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
runApp('shiny_learn.r')
imp_df
train_model <- readRDS("rf_ev.rds")
partial1 <- partial(train_model, pred.var = 'process1', which.class = "vio")
library(pdp)
partial1 <- partial(train_model, pred.var = 'process1', which.class = "vio")
formula(train_model)
all.vars(train_model)
train_model$coefnames
terms(train_model)
summary(train_model)
summary(train_model$finalModel)
summary(train_model$finalModel$xNames)
View(train_model)
View(df3)
View(imp_df)
rf_Ev
rf_ev
train_model
train_model <- readRDS("rf_ev.rds")
formula(train_model)
View(imp_df)
predictor_labels <- formula(train_model)
predictor_labels
View(train_model)
summary(train_model)
summary(train_model$finalModel)
summary(train_model$finalModel$xNames)
train_model$finalModel$xNames
rev(train_model$finalModel$xNames)
names(train_model$finalModel$xNames)
values(train_model$finalModel$xNames)
train_model$finalModel$xNames
train_model$finalModel$xNames[1]
train_model$finalModel$xNames[1] <- "test"
train_model$finalModel$xNames[1]
train_model$finalModel$xNames
View(imp_df)
length(train_model$finalModel$xNames)
1:14
new_names <- c("history of election violence", "GDP per capita", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "political competition",
"executive constraints", "time since last election", "election in next six months")
new_names[1]
new_names <- c("history of election violence", "GDP per capita", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "political competition",
"executive constraints", "time since last election", "election in next six months")
for(i in 1:14){
train_model$finalModel$xNames[i] <- new_names[i]
}
train_model$finalModel$xNames
test_pd <- partail(train_model, pred.var = "history of election violence", which.class = "vio")
test_pd <- partial(train_model, pred.var = "history of election violence", which.class = "vio")
test_pd <- partial(train_model, pred.var = "process1", which.class = "vio")
library(pdp)
test_pd <- partial(train_model, pred.var = "process1", which.class = "vio")
train_model <- readRDS("rf_ev.rds")
partial_data <- partial(train_model, pred.var = "process1", which.class = "vio")
train_model$finalModel$xNames[1] <- "testname"
partial_data <- partial(train_model, pred.var = "testname", which.class = "vio")
partial_data <- partial(train_model, pred.var = "process1", which.class = "vio")
install.packages("dict")
devtools::install_github("mkuhn/dict")
install.packages("Rtools")
install.packages("hash")
library(hash)
hash()
h <- hash(c('foo','bar','baz'), 1:3)
View(h)
hash
summary(hash)
hash[1]
h
summary(h)
h[1]
h[[1]]
h$foo
h$bar
h$foo <- "test_var"
h$foo
model_names <- train_model$finalModel$xNames
train_model <- readRDS("rf_ev.rds")
#change names to match dropdown.
new_names <- c("history of election violence", "GDP per capita", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "political competition",
"executive constraints", "time since last election", "election in next six months")
model_names <- train_model$finalModel$xNames
dict <- hash(new_names, model_names)
model_names
train_model <- readRDS("rf_ev.rds")
#change names to match dropdown.
new_names <- c("history of election violence", "GDP per capita", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "year", "political competition",
"executive constraints", "time since last election", "election in next six months")
model_names <- train_model$finalModel$xNames
dict <- hash(new_names, model_names)
dict
dict$'coup risk'
View(dict)
dict$`coup risk`
View(dict)
dict$`coup risk`
View(dict)
View(dict)
as.character(unique(imp_df$variable[-1]))
cat(unique(imp_df$variable[-1]))
as.character(unique(imp_df$variable[-1]))
sQuote(as.character(unique(imp_df$variable[-1])))
test <- sQuote(as.character(unique(imp_df$variable[-1])))
test[1]
cat(test[1])
cat(test)
test2 <- cat(test)
dict$`coup risk`
test
test[8]
cat(test[8])
dict$test[8]
dict$cat(test[8])
dict$tes
test[1]
test <- as.character(unique(imp_df$variable[-1]))
test[1]
test <- c('test', 'test2', 'test3')
test
test[1]
new_names <- c('history', "gdp", "imr", "coup", "population",
"econgrow", "quality of democracy", "relative precipitation", "regime tenure (months)", "year", "political competition",
"executive constraints", "time since last election", "election in next six months")
model_names <- train_model$finalModel$xNames
dict <- hash(new_names, model_names)
dict
dict$coup
dict$econgrow
test <- dict$coup
partial_data <- partial(train_model, pred.var = test, which.class = "vio")
dict
new_names <- c('history of election violence', "GDP per capita", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "year", "political competition",
"executive constraints", "time since last election", "election in next six months")
model_names <- train_model$finalModel$xNames
dict <- hash(new_names, model_names)
get(new_names)
get(new_names[1])
new_names[1]
get(new_names[1])
key_value <- "history"
dict$key_value
new_names <- c("history", "gdp", "infant mortality rate (logged)", "coup risk", "population (logged)",
"economic growth", "quality of democracy", "relative precipitation", "regime tenure (months)", "year", "political competition",
"executive constraints", "time since last election", "election in next six months")
model_names <- train_model$finalModel$xNames
dict <- hash(new_names, model_names)
dict$history
dict$key_value
get(key_value)
train_model
train_model$pred
train_model$modelInfo
train_model$trainingData
install.packages('rsconnect')
rsconnect::setAccountInfo(name='oefdatascience',
token='DC7FBCB4402E1934501AAF654BAFD18A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='oefdatascience',
token='DC7FBCB4402E1934501AAF654BAFD18A',
secret='+4APq/MK0pMprFgtEVilFnpPlo0JTNsRSTa1ECZ1')
library(rsconnect)
rsconnect::deployApp('index.Rmd')
rsconnect::deployApp('index.Rmd')
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
df1_gauge <- df1
df2_gauage <- df2
#make diff between monthly update and annual risk
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
df1 <- df1[order(df1$dates), ]
df11 <- df1[df1$dates >= Sys.Date(), ]
df2$diff <- df2$prediction - df11$prediction
View(df1)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
#keep original data for guages
df1_gauge <- df1
df2_gauage <- df2
View(df1)
df1 <- df1[order(df1$dates), ]
df11 <- df1[df1$dates >= Sys.Date(), ]
View(df1)
df1$dates2 <- as.Date(df1$dates, format = "%m/%d/%Y")
View(df1)
df1$dates2 <- as.Date(df1$dates, format = "%m/%d/%y")
View(df1)
df1 <- read.csv("annual_risk_table.csv", stringsAsFactors = FALSE)
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
#keep original data for guages
df1_gauge <- df1
df2_gauage <- df2
#make diff between monthly update and annual risk
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
View(df1)
View(df2)
View(df1)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
View(df1)
View(df2)
1-.2355452
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
df1$dates <- as.Date(df1$dates, format = "%m/%d/%Y")
View(df1)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
View(df1)
df1$dates2 <- as.character(df1$dates)
df1$dates3 <- as.Date(df1$dates2, format = "%m/%d/%Y")
View(df1)
View(df2)
df1 <- read.csv("annual_risk_table.csv")
df2 <- read.csv("update_risk_table.csv")
df3 <- read.csv("full_data.csv")
imp_df <- read.csv("imp_df.csv")
#keep original data for guages
df1_gauge <- df1
df2_gauage <- df2
df1$dates2 <- as.Date(df1$dates, format = "%Y/%m/%d")
View(df1)
df1$dates2 <- as.Date(df1$dates)
View(df1)
View(df3)
df32 <- df3[ , c("country", "dates", "elecViolence1")]
df32 <- df32[!duplicated(df32), ]
df32$dates <- as.Date(df32$dates, format = "%m/%d/%Y")
View(df32)
df32 <- df2[order(df32$datse, decreasing = TRUE), ]
df32 <- df2[order(df32$dates, decreasing = TRUE), ]
View(df32)
df32 <- df32[order(df32$dates, decreasing = TRUE), ]
df32 <- df3[ , c("country", "dates", "elecViolence1")]
df32 <- df32[!duplicated(df32), ]
df32$dates <- as.Date(df32$dates, format = "%m/%d/%Y")
df32 <- df32[order(df32$dates, decreasing = TRUE), ]
View(df32)
df32 <- df3[ , c("country", "dates", "elecViolence1")]
df32 <- df32[!duplicated(df32), ]
df32$dates <- as.Date(df32$dates, format = "%m/%d/%Y")
df32 <- df32[order(df32$dates, decreasing = FALSE), ]
View(df32)
library(rsconnect)
rsconnect::setAccountInfo(name='oefdatascience',
token='DC7FBCB4402E1934501AAF654BAFD18A',
secret='+4APq/MK0pMprFgtEVilFnpPlo0JTNsRSTa1ECZ1')
rsconnect::deployApp('index.Rmd')
rsconnect::deployApp('index.Rmd')
deployApp()
deployApp('index.Rmd')
rsconnect::appDependencies(
)
deployApp('index.Rmd')
devtools::install_github("walkerke/bsselectR")
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion,
some compassion, some humor, and some style.")
quotes <- setNames(quotes, c("Einstein", "Shakespeare", "Angelou"))
bsselect(quotes, type = "text", height = 200)
library(bsselectR)
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion,
some compassion, some humor, and some style.")
quotes <- setNames(quotes, c("Einstein", "Shakespeare", "Angelou"))
bsselect(quotes, type = "text", height = 200)
#dynamically produce pdp pictures based on user selection
quotes <- c("Look deep into nature, and then you will understand everything better.",
"A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
"My mission in life is not merely to survive, but to thrive; and to do so with some passion,
some compassion, some humor, and some style.")
quotes <- setNames(quotes, c("Einstein", "Shakespeare", "Angelou"))
bsselect(quotes, type = "text", height = 200)
quotes
htmlwidgets::getDependency()
htmlwidgets::getDependency(index2.Rmd)
htmlwidgets::getDependency('index2.Rmd')
images <- c("partial_dependence_plots1.png","process1.png", "pcgdp.png", "lpop2.png", "lpolity2.png", "lpolcomp.png", "logIMF.png", "lexconst.png",
"lastelection.png", "regimetenure.png", "spi.png")
images <- setNames(images, c("All Predictors", "History of Election Violence", "GDP Per Capita", "Population (Logged)", "Quality of Democracy",
"Political Competition", "Infant Mortality Rate (Logged)", "Executive Constraints", "Time Since Last Election",
"Regime Tenure (Months)", "Relative Precipitation (SPI)"))
test <- bsselect(images, type = "img", frame_height = "90%", frame_width = "85%", live_search = TRUE,
show_tick = TRUE, selected = "All Predictors")
test
library(bsselectR)
images <- c("partial_dependence_plots1.png","process1.png", "pcgdp.png", "lpop2.png", "lpolity2.png", "lpolcomp.png", "logIMF.png", "lexconst.png",
"lastelection.png", "regimetenure.png", "spi.png")
images <- setNames(images, c("All Predictors", "History of Election Violence", "GDP Per Capita", "Population (Logged)", "Quality of Democracy",
"Political Competition", "Infant Mortality Rate (Logged)", "Executive Constraints", "Time Since Last Election",
"Regime Tenure (Months)", "Relative Precipitation (SPI)"))
test <- bsselect(images, type = "img", frame_height = "90%", frame_width = "85%", live_search = TRUE,
show_tick = TRUE, selected = "All Predictors")
test
test$dependencies
images$dependencies
test$dependencies
